{"ast":null,"code":"/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { warmStrategyCache } from './warmStrategyCache';\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { NetworkFirst } from 'workbox-strategies/NetworkFirst.js';\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response/CacheableResponsePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a page caching recipe with a network timeout\n *\n * @memberof workbox-recipes\n *\n * @param {Object} [options]\n * @param {string} [options.cacheName] Name for cache. Defaults to pages\n * @param {RouteMatchCallback} [options.matchCallback] Workbox callback function to call to match to. Defaults to request.mode === 'navigate';\n * @param {number} [options.networkTimoutSeconds] Maximum amount of time, in seconds, to wait on the network before falling back to cache. Defaults to 3\n * @param {WorkboxPlugin[]} [options.plugins] Additional plugins to use for this recipe\n * @param {string[]} [options.warmCache] Paths to call to use to warm this cache\n */\n\nfunction pageCache() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  const defaultMatchCallback = _ref => {\n    let {\n      request\n    } = _ref;\n    return request.mode === 'navigate';\n  };\n\n  const cacheName = options.cacheName || 'pages';\n  const matchCallback = options.matchCallback || defaultMatchCallback;\n  const networkTimeoutSeconds = options.networkTimeoutSeconds || 3;\n  const plugins = options.plugins || [];\n  plugins.push(new CacheableResponsePlugin({\n    statuses: [0, 200]\n  }));\n  const strategy = new NetworkFirst({\n    networkTimeoutSeconds,\n    cacheName,\n    plugins\n  }); // Registers the route\n\n  registerRoute(matchCallback, strategy); // Warms the cache\n\n  if (options.warmCache) {\n    warmStrategyCache({\n      urls: options.warmCache,\n      strategy\n    });\n  }\n}\n\nexport { pageCache };","map":{"version":3,"names":["warmStrategyCache","registerRoute","NetworkFirst","CacheableResponsePlugin","pageCache","options","defaultMatchCallback","request","mode","cacheName","matchCallback","networkTimeoutSeconds","plugins","push","statuses","strategy","warmCache","urls"],"sources":["C:/Users/Papichulo/Desktop/react-work/node_modules/workbox-recipes/pageCache.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { warmStrategyCache } from './warmStrategyCache';\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { NetworkFirst } from 'workbox-strategies/NetworkFirst.js';\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response/CacheableResponsePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a page caching recipe with a network timeout\n *\n * @memberof workbox-recipes\n *\n * @param {Object} [options]\n * @param {string} [options.cacheName] Name for cache. Defaults to pages\n * @param {RouteMatchCallback} [options.matchCallback] Workbox callback function to call to match to. Defaults to request.mode === 'navigate';\n * @param {number} [options.networkTimoutSeconds] Maximum amount of time, in seconds, to wait on the network before falling back to cache. Defaults to 3\n * @param {WorkboxPlugin[]} [options.plugins] Additional plugins to use for this recipe\n * @param {string[]} [options.warmCache] Paths to call to use to warm this cache\n */\nfunction pageCache(options = {}) {\n    const defaultMatchCallback = ({ request }) => request.mode === 'navigate';\n    const cacheName = options.cacheName || 'pages';\n    const matchCallback = options.matchCallback || defaultMatchCallback;\n    const networkTimeoutSeconds = options.networkTimeoutSeconds || 3;\n    const plugins = options.plugins || [];\n    plugins.push(new CacheableResponsePlugin({\n        statuses: [0, 200],\n    }));\n    const strategy = new NetworkFirst({\n        networkTimeoutSeconds,\n        cacheName,\n        plugins,\n    });\n    // Registers the route\n    registerRoute(matchCallback, strategy);\n    // Warms the cache\n    if (options.warmCache) {\n        warmStrategyCache({ urls: options.warmCache, strategy });\n    }\n}\nexport { pageCache };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,qBAAlC;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,YAAT,QAA6B,oCAA7B;AACA,SAASC,uBAAT,QAAwC,uDAAxC;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,GAAiC;EAAA,IAAdC,OAAc,uEAAJ,EAAI;;EAC7B,MAAMC,oBAAoB,GAAG;IAAA,IAAC;MAAEC;IAAF,CAAD;IAAA,OAAiBA,OAAO,CAACC,IAAR,KAAiB,UAAlC;EAAA,CAA7B;;EACA,MAAMC,SAAS,GAAGJ,OAAO,CAACI,SAAR,IAAqB,OAAvC;EACA,MAAMC,aAAa,GAAGL,OAAO,CAACK,aAAR,IAAyBJ,oBAA/C;EACA,MAAMK,qBAAqB,GAAGN,OAAO,CAACM,qBAAR,IAAiC,CAA/D;EACA,MAAMC,OAAO,GAAGP,OAAO,CAACO,OAAR,IAAmB,EAAnC;EACAA,OAAO,CAACC,IAAR,CAAa,IAAIV,uBAAJ,CAA4B;IACrCW,QAAQ,EAAE,CAAC,CAAD,EAAI,GAAJ;EAD2B,CAA5B,CAAb;EAGA,MAAMC,QAAQ,GAAG,IAAIb,YAAJ,CAAiB;IAC9BS,qBAD8B;IAE9BF,SAF8B;IAG9BG;EAH8B,CAAjB,CAAjB,CAT6B,CAc7B;;EACAX,aAAa,CAACS,aAAD,EAAgBK,QAAhB,CAAb,CAf6B,CAgB7B;;EACA,IAAIV,OAAO,CAACW,SAAZ,EAAuB;IACnBhB,iBAAiB,CAAC;MAAEiB,IAAI,EAAEZ,OAAO,CAACW,SAAhB;MAA2BD;IAA3B,CAAD,CAAjB;EACH;AACJ;;AACD,SAASX,SAAT"},"metadata":{},"sourceType":"module"}