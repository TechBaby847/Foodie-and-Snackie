{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox-cacheable-response\n */\n\nclass CacheableResponse {\n  /**\n   * To construct a new CacheableResponse instance you must provide at least\n   * one of the `config` properties.\n   *\n   * If both `statuses` and `headers` are specified, then both conditions must\n   * be met for the `Response` to be considered cacheable.\n   *\n   * @param {Object} config\n   * @param {Array<number>} [config.statuses] One or more status codes that a\n   * `Response` can have and be considered cacheable.\n   * @param {Object<string,string>} [config.headers] A mapping of header names\n   * and expected values that a `Response` can have and be considered cacheable.\n   * If multiple headers are provided, only one needs to be present.\n   */\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(config.statuses || config.headers)) {\n        throw new WorkboxError('statuses-or-headers-required', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor'\n        });\n      }\n\n      if (config.statuses) {\n        assert.isArray(config.statuses, {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.statuses'\n        });\n      }\n\n      if (config.headers) {\n        assert.isType(config.headers, 'object', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.headers'\n        });\n      }\n    }\n\n    this._statuses = config.statuses;\n    this._headers = config.headers;\n  }\n  /**\n   * Checks a response to see whether it's cacheable or not, based on this\n   * object's configuration.\n   *\n   * @param {Response} response The response whose cacheability is being\n   * checked.\n   * @return {boolean} `true` if the `Response` is cacheable, and `false`\n   * otherwise.\n   */\n\n\n  isResponseCacheable(response) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(response, Response, {\n        moduleName: 'workbox-cacheable-response',\n        className: 'CacheableResponse',\n        funcName: 'isResponseCacheable',\n        paramName: 'response'\n      });\n    }\n\n    let cacheable = true;\n\n    if (this._statuses) {\n      cacheable = this._statuses.includes(response.status);\n    }\n\n    if (this._headers && cacheable) {\n      cacheable = Object.keys(this._headers).some(headerName => {\n        return response.headers.get(headerName) === this._headers[headerName];\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!cacheable) {\n        logger.groupCollapsed(`The request for ` + `'${getFriendlyURL(response.url)}' returned a response that does ` + `not meet the criteria for being cached.`);\n        logger.groupCollapsed(`View cacheability criteria here.`);\n        logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n        logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n        logger.groupEnd();\n        const logFriendlyHeaders = {};\n        response.headers.forEach((value, key) => {\n          logFriendlyHeaders[key] = value;\n        });\n        logger.groupCollapsed(`View response status and headers here.`);\n        logger.log(`Response status: ${response.status}`);\n        logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n        logger.groupEnd();\n        logger.groupCollapsed(`View full response details here.`);\n        logger.log(response.headers);\n        logger.log(response);\n        logger.groupEnd();\n        logger.groupEnd();\n      }\n    }\n\n    return cacheable;\n  }\n\n}\n\nexport { CacheableResponse };","map":{"version":3,"names":["assert","WorkboxError","getFriendlyURL","logger","CacheableResponse","constructor","config","process","env","NODE_ENV","statuses","headers","moduleName","className","funcName","isArray","paramName","isType","_statuses","_headers","isResponseCacheable","response","isInstance","Response","cacheable","includes","status","Object","keys","some","headerName","get","groupCollapsed","url","log","JSON","stringify","groupEnd","logFriendlyHeaders","forEach","value","key"],"sources":["C:/Users/Papichulo/Desktop/react-work/node_modules/workbox-cacheable-response/CacheableResponse.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.statuses || config.headers)) {\n                throw new WorkboxError('statuses-or-headers-required', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.statuses',\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, 'object', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.headers',\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n    isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(response, Response, {\n                moduleName: 'workbox-cacheable-response',\n                className: 'CacheableResponse',\n                funcName: 'isResponseCacheable',\n                paramName: 'response',\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName) => {\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for ` +\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\n                    `not meet the criteria for being cached.`);\n                logger.groupCollapsed(`View cacheability criteria here.`);\n                logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n                logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key) => {\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(`View response status and headers here.`);\n                logger.log(`Response status: ${response.status}`);\n                logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n                logger.groupEnd();\n                logger.groupCollapsed(`View full response details here.`);\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\nexport { CacheableResponse };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}